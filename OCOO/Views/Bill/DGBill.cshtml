@model OCOO.Models.FirmMasters.Deduction
@{
    ViewData["Title"] = "DGBill";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-wrapper">
    <div class="row page-titles">
        <div class="col-md-6 align-self-center">
            <h3 class="text-themecolor">DG Billing</h3>
        </div>
        <div class="col-md-6 align-self-right" style="display:none">
            <span class="float-right"><a data-toggle="collapse" href="#searchblock" role="button" aria-expanded="true" aria-controls="searchblock" class="btn btn-sm btn-primary" title="Search"><i class="fa fa-filter" aria-hidden="true"></i></a></span>
        </div>
    </div>
    <div class="container-fluid">
        <div class="collapse" id="searchblock">
            <div class="card">
                <input type="hidden" id="firmtemp" value="@TempData["firm"]" />
                <input type="hidden" id="stptemp" value="@TempData["stp"]" />
                <form asp-controller="Bill" asp-action="DGBill">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>STP</label>
                                    @Html.DropDownListFor(m => m.Fk_STPId, new SelectList(ViewBag.ddlSTP, "Value", "Text"), new { @class = "form-control" })
                                </div>
                            </div>


                            <div class="col-md-2 mt-4">
                                <div class="form-group mt-2">
                                    <button type="submit" class="btn btn-primary  btn-xs btn-sm " id="Submit" value="Search" name="btnSubmit"><i class="fa fa-search"></i> Search</button>
                                    <input type="button" value="Reset" class="btn btn-secondary btn-xs btn-sm" onclick="return Getreset();">
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="card">
            @if (Model.dtDetails != null)
            {
                @if (Model.dtDetails.Rows[0]["DGBillStatus"].ToString() == "pending")
                {
                    <div class="card-body p-3 pb-20">
                        @if (Model != null && Model.dtDetails != null && Model.dtDetails.Rows.Count > 0)
                        {
                            <div class="row">
                                <div class="col-md-10">
                                </div>
                                <div class="col-md-2 pb-2"><button data-toggle="modal" data-target="#DGbill_Modal" class="btn btn-outline-success btn-xs" style="float:right" onclick="return getBlank();"><i class="fa fa-check-circle" aria-hidden="true"></i> Verify </button></div>
                            </div>
                        }

                        <div class="table-responsive" id="data-table">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        @if (Model.dtDetails != null)
                                        {
                                            <th colspan="14" style="font-size:15px;text-align:center"><span>@Model.dtDetails.Rows[0]["HeaderText"].ToString()</span></th>
                                        }
                                    </tr>
                                    <tr>
                                        <th>Sn</th>
                                        <th>Edit</th>
                                        <th>Date</th>
                                        <th>Electricity Cut Start Time</th>
                                        <th>Electricity Cut End Time</th>
                                        <th>MeterReading</th>
                                        <th>DG Start Time</th>
                                        <th>DG End Time</th>
                                        <th>Diesel Consumes</th>
                                        <th>Diesel Rate In Month</th>
                                        <th>Total DG Duration</th>
                                        <th>STP</th>
                                        <th>Main Pumping Station</th>
                                        @* <th>Modified</th>*@

                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model != null)
                                    {
                                        if (Model.dtDetails != null)
                                        {
                                            if (Model.dtDetails.Rows.Count > 0)
                                            {
                                                for (int i = 0; i < Model.dtDetails.Rows.Count; i++)
                                                {

                                                    <tr class="@((Boolean)Model.dtDetails.Rows[i]["IsModified"]?"colorbg  measurementcolor":"")">
                                                        <td>@(i + 1)<sup style="font-size:12px" class="text-white">*</sup></td>
                                                        <td>
                                                            <a href="#" onclick="return GetUpdate('@Model.dtDetails.Rows[i]["Pk_DeductionId"].ToString()','@Model.dtDetails.Rows[i]["DeductionDate"].ToString()','@Model.dtDetails.Rows[i]["ElectricityCutStartTime"].ToString()','@Model.dtDetails.Rows[i]["ElectricityCutEndTime"].ToString()','@Model.dtDetails.Rows[i]["MeterReading"].ToString()','@Model.dtDetails.Rows[i]["DGStartTime"].ToString()','@Model.dtDetails.Rows[i]["DGEndTime"].ToString()','@Model.dtDetails.Rows[i]["DieselConsumes"].ToString()','@Model.dtDetails.Rows[i]["DieselRateInMonth"].ToString()','@Model.dtDetails.Rows[i]["TotalDGDuration"].ToString()','@Model.dtDetails.Rows[i]["STP"].ToString()','@Model.dtDetails.Rows[i]["MainPumpingStation"].ToString()');"><i class="fa fa-pencil text-danger click" style="font-size:24px"></i></a>
                                                            @if (Model.dtDetails.Rows[i]["IsModified"].ToString() == "True")
                                                            {
                                                                <span class="badge badge-info">@Model.dtDetails.Rows[i]["ModifiedDate"].ToString()</span>
                                                                <br />
                                                                <span class="badge badge-success">@Model.dtDetails.Rows[i]["ModifiedBy"].ToString()</span>

                                                            }
                                                        </td>
                                                        <td>@Model.dtDetails.Rows[i]["DeductionDate"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["ElectricityCutStartTime"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["ElectricityCutEndTime"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["MeterReading"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["DGStartTime"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["DGEndTime"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["DieselConsumes"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["DieselRateInMonth"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["TotalDGDuration"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["STP"].ToString()</td>
                                                        <td>@Model.dtDetails.Rows[i]["MainPumpingStation"].ToString()</td>

                                                    </tr>
                                                }
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card-body p-3 pb-20">
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="">
                                        <center class="mt-5">
                                            <center class="my-5">
                                                <img width="150" src="~/assets/images/checkedicon.png" />
                                                <h4 class="mt-4">Sorry, you can not edit this DG Bill because it is already verified.</h4>
                                            </center>
                                        </center>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="card-body p-3 pb-20">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                <center class="mt-5">
                                    <center class="my-5">
                                        <h4 class="mt-4">No data found for this STP.</h4>
                                    </center>
                                </center>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    @*modal*@
    <div id="UpdateBill_DGBill" class="modal fade" role="dialog" data-keyboard="false" data-backdrop="static">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header modal-header">
                    <h4 class="modal-title"><span class="fa fa-pencil-square-o"></span>DG Billing</h4>
                    <button type="button" class="close float-right" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="row mt-2">
                        <input type="hidden" asp-for="Pk_DeductionId" class="form-control" />

                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Electricity Cut Start Time <span class="text-danger">*</span></label>
                                <input type="time" onchange="return addFiveMinutes()" class="form-control" asp-for="ElectricityCutStartTime" placeholder="Enter Electricity Cut Start Time" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Electricity Cut End Time <span class="text-danger">*</span></label>
                                <input type="time" onchange="return addOneMinutes()" class="form-control" asp-for="ElectricityCutEndTime" placeholder="Enter Electricity Cut End Time" onkeypress="return isNumberKey(this) " />
                                <b id="Showtimemsg" class="text-danger"></b>
                            </div>
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-6">
                            <div class="form-group">
                                <label>DG Start Time <span class="text-danger">*</span></label>
                                <input type="time" onchange="return fDGStartDuration()" class="form-control" asp-for="DGStartTime" placeholder="Enter DG Start Time" onkeypress="return isNumberKey(this)" />
                                <b id="Showtimemsg11" class="text-danger"></b>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>DG End Time <span class="text-danger">*</span></label>
                                <input type="time" onchange="return fCheckDGDuration()" class="form-control" asp-for="DGEndTime" placeholder="Enter DG End Time" onkeypress="return isNumberKey(this)" />
                                <b id="Showtimemsg1" class="text-danger"></b>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Diesel Consumption (In Litre) <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" asp-for="DieselConsumes" placeholder="Enter Diesel Consumption (In Litre)" onkeypress="return isNumberKey(this)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Diesel Rate for the day <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" asp-for="DieselRateInMonth" placeholder="Enter Diesel Rate for the day" onkeypress="return isNumberKey(this)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Total DG Duration <span class="text-danger">*</span></label>
                                <input type="text" readonly class="form-control" asp-for="TotalDGDuration" placeholder="Enter Total DG Duration" onkeypress="return isNumberKey(this)" />
                            </div>
                        </div>

                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-danger  btn-xs" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    <button type="button" onclick="return GetUpdateByID();" class="btn btn-outline-success btn-xs"><i class="fa fa-save"></i> Save</button>
                </div>
            </div>
        </div>
    </div>

    @*VeryFii*@
    <form>
        <div id="DGbill_Modal" class="modal fade" role="dialog" data-keyboard="false" data-backdrop="static">
            <div class="modal-dialog modal-xs">
                <div class="modal-content">
                    <div class="modal-header modal-header">
                        <h4 class="modal-title"><span class="fa fa-check-circle"></span> Verify Bill</h4>
                        <button type="button" class="close float-right" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="row mt-2">
                            <input type="hidden" name="Bill_Id" id="Bill_Id" value="@ViewBag.Fk_BillId" />
                            <input type="hidden" name="STPId" id="STPId" value="@ViewBag.Pk_STPId" />
                            <input type="hidden" name="PK_InvId" id="PK_InvId" value="@ViewBag.PK_InvId" />

                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="form-group">

                                        <label>Attachment<span class="text-danger">*</span></label>
                                        <input type="file" name="AttachmentURl" onchange="return ValidateFiles(this)" class="form-control" id="Attachment" />
                                        <b class="text-danger">JPG,JPEG,PNG,PDF and file size only 5MB Allow !</b>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Remark</label>
                                    <textarea class="form-control" name="Remark" id="Remark" placeholder="Enter Remark."></textarea>
                                </div>
                            </div>

                            <div class="col-md-12">
                                <input type="checkbox" id="md_checkbox_34" class="filled-in chk-col-amber" />
                                <label style="font-size:12px;" for="md_checkbox_34">It is hereby declared that the details mentioned here/above are true and correct.</label>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-danger  btn-xs" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                        <button type="button" class="btn btn-outline-success btn-xs" onclick="ValiddateJEBillCApproval()"><i class="fa fa-save"></i> Save</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <script src="~/script/generatefirmbill.js"></script>
    <script src="~/script/frimstpbind.js"></script>
    <script>




        function GetUpdate(Pk_DeductionId, DeductionDate, ElectricityCutStart, ElectricityCutEndTime, MeterReading, DGStartTime, DGEndTime, DieselConsumes, DieselRateInMonth, TotalDGDuration, STP, MainPumpingStation) {
            debugger;
            $('#UpdateBill_DGBill').modal('show');
            $('#Pk_DeductionId').val(Pk_DeductionId);
            $('#ElectricityCutStartTime').val(ElectricityCutStart);
            $('#ElectricityCutEndTime').val(ElectricityCutEndTime);
            $('#DGStartTime').val(DGStartTime);
            $('#DGEndTime').val(DGEndTime);
            $('#DieselConsumes').val(DieselConsumes);
            $('#DieselRateInMonth').val(DieselRateInMonth);
            $('#TotalDGDuration').val(TotalDGDuration);


        }
        function GetUpdateByID() {
            debugger;
            var Pk_DeductionId = $('#Pk_DeductionId').val();
            var ElectricityCutStartTime = $('#ElectricityCutStartTime').val();
            var ElectricityCutEndTime = $('#ElectricityCutEndTime').val();
            var DGStartTime = $('#DGStartTime').val();
            var DGEndTime = $('#DGEndTime').val();
            var DieselConsumes = $('#DieselConsumes').val();
            var TotalDGDuration = $('#TotalDGDuration').val();
            var DieselRateInMonth = $('#DieselRateInMonth').val();

            var data = new FormData();

            data.append("Pk_DeductionId", Pk_DeductionId);
            data.append("ElectricityCutStartTime", ElectricityCutStartTime);
            data.append("ElectricityCutEndTime", ElectricityCutEndTime);
            data.append("DGStartTime", DGStartTime);
            data.append("DGEndTime", DGEndTime);
            data.append("DieselConsumes", DieselConsumes);
            data.append("TotalDGDuration", TotalDGDuration);
            data.append("DieselRateInMonth", DieselRateInMonth);

            $.ajax({
                type: "POST",
                url: "/Bill/GetDeductionUpdateBYID",
                data: data,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                processData: false,
                contentType: false,
                success: function (data) {
                    if (data.status == "1") {
                        fShowToastalert(data.message);
                        $('#UpdateBill_DGBill').modal('hide');
                        window.location.reload();

                    }
                },
                error: function (error) {
                    fShowToastalert(data.message);
                }
            });

        }
        //copy
        function fvalidateDGtime() {

            var SPS_IPSId = $("#PK_IPS").val();

            if (SPS_IPSId == null || SPS_IPSId == "" || SPS_IPSId == NaN || SPS_IPSId == undefined) {
                SPS_IPSId = 0;
            }

            if (parseInt(SPS_IPSId) == 120 || parseInt(SPS_IPSId) == 181) {
                return true;
            } else {
                const startTimeInput = document.getElementById('ElectricityCutStartTime');
                const endTimeInput = document.getElementById('ElectricityCutEndTime');
                const checkTimeInput = document.getElementById('DGStartTime');
                const endcheckTimeInput = document.getElementById('DGEndTime');
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;
                const checkTime = checkTimeInput.value;
                const endcheckTime = endcheckTimeInput.value;

                // Check if all inputs are in HH:MM format
                const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;

                // if (timePattern.test(startTime) && timePattern.test(endTime) && timePattern.test(checkTime) && timePattern.test(endcheckTime))
                // {
                // Convert times to total minutes
                const [startHours, startMinutes] = startTime.split(':');
                const [endHours, endMinutes] = endTime.split(':');
                const [checkHours, checkMinutes] = checkTime.split(':');
                const [endcheckHours, endcheckMinutes] = endcheckTime.split(':');

                const totalStartMinutes = parseInt(startHours, 10) * 60 + parseInt(startMinutes, 10);
                const totalEndMinutes = parseInt(endHours, 10) * 60 + parseInt(endMinutes, 10);
                const totalCheckMinutes = parseInt(checkHours, 10) * 60 + parseInt(checkMinutes, 10);
                const totalEndCheckMinutes = parseInt(endcheckHours, 10) * 60 + parseInt(endcheckMinutes, 10);

                //if (totalCheckMinutes >= totalStartMinutes && totalCheckMinutes <= totalEndMinutes) {
                if (totalEndMinutes >= totalStartMinutes) {
                    $('#Showtimemsg').html('')
                } else {
                    // $('#Showtimemsg').html('Time difference should be greater than 5 minutes.');
                    $('#Showtimemsg').html('Electricity cut end time should be greater than electricity cut start time.');
                    $('#ElectricityCutEndTime').val('')
                    $('#DGEndTime').val('')
                    return false;
                }
                if (totalCheckMinutes >= totalStartMinutes) {
                    $('#Showtimemsg11').html('')
                } else {
                    $('#Showtimemsg11').html('DG start time should be greater than electricity cut start time.');
                    $('#DGStartTime').val('')
                    return false;
                }
                if (totalEndCheckMinutes >= totalEndMinutes) {
                    $('#Showtimemsg1').html('')
                }
                //else {  // commented on 13 Feb 2024 by advice of Surendra Sir
                //    $('#Showtimemsg1').html('DG end time should be greater than electricity cut end time.');
                //    $('#DGEndTime').val('')
                //    return false;
                //}
                if (totalEndCheckMinutes >= totalCheckMinutes) {
                    $('#Showtimemsg1').html('')
                } else {
                    $('#Showtimemsg1').html('DG end time should be greater than DG start time.');
                    $('#DGEndTime').val('')
                    return false;
                }
            }
            // }
        }
        function checkdate() {

            const dateToCheck11 = $("#DeductionDate").val();
            // Split the date string into day, month, and year components
            const [day, month, year] = dateToCheck11.split('/');

            // Create a Date object (Note: Months are zero-based in JavaScript Date)
            const dateToCheck = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);


            // Get the current date
            const currentDate = new Date();
            // Compare the dates
            if (dateToCheck > currentDate) {

                fShowToastalert('Please select Past date!');
                $("#DeductionDate").focus();
                return false;
            }


        }
        function addFiveMinutes() {
            // Get the current time from the input element
            let currentTime = document.getElementById('ElectricityCutStartTime').value;

            // Split hours and minutes
            let [hours, minutes] = currentTime.split(':');

            // Convert hours and minutes to numbers
            hours = parseInt(hours);
            minutes = parseInt(minutes);

            // Add 5 minutes
            let newMinutes = (minutes + 1) % 60;
            let additionalHours = Math.floor((minutes + 1) / 60);
            hours = (hours + additionalHours) % 24;

            // Format the new time with leading zeros if necessary
            let newTime =
                (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);
            // Set the new time in the input element
            $('#DGStartTime').val(newTime)
            fTotalDGDuration()
        }
        function addOneMinutes() {

            // Get the current time from the input element
            let currentTime = document.getElementById('ElectricityCutEndTime').value;

            // Split hours and minutes
            let [hours, minutes] = currentTime.split(':');

            // Convert hours and minutes to numbers
            hours = parseInt(hours);
            minutes = parseInt(minutes);

            // Add 5 minutes
            let newMinutes = (minutes + 1) % 60;
            let additionalHours = Math.floor((minutes + 1) / 60);
            hours = (hours + additionalHours) % 24;

            // Format the new time with leading zeros if necessary
            let newTime =
                (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);

            // Set the new time in the input element
            $('#DGEndTime').val(newTime)
            fvalidateDGtime()
            fTotalDGDuration()
        }

        function fCheckDGDuration() {

            // Get the current time from the input element
            let currentTime = document.getElementById('DGEndTime').value;

            // Split hours and minutes
            let [hours, minutes] = currentTime.split(':');

            // Convert hours and minutes to numbers
            hours = parseInt(hours);
            minutes = parseInt(minutes);

            // Add 5 minutes
            let newMinutes = (minutes) % 60;
            let additionalHours = Math.floor((minutes) / 60);
            hours = (hours + additionalHours) % 24;

            // Format the new time with leading zeros if necessary
            let newTime =
                (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);

            // Set the new time in the input element
            $('#DGEndTime').val(newTime)
            fvalidateDGtime()
            fTotalDGDuration()
        }
        function fDGStartDuration() {

            // Get the current time from the input element
            let currentTime = document.getElementById('DGStartTime').value;

            // Split hours and minutes
            let [hours, minutes] = currentTime.split(':');

            // Convert hours and minutes to numbers
            hours = parseInt(hours);
            minutes = parseInt(minutes);

            // Add 5 minutes
            let newMinutes = (minutes) % 60;
            let additionalHours = Math.floor((minutes) / 60);
            hours = (hours + additionalHours) % 24;

            // Format the new time with leading zeros if necessary
            let newTime =
                (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);

            // Set the new time in the input element
            $('#DGStartTime').val(newTime)
            fvalidateDGtime()
            fTotalDGDuration()
        }

        function fTotalDGDuration() {
            const startTimeInput = document.getElementById('DGStartTime').value;
            const endTimeInput = document.getElementById('DGEndTime').value;

            // Create date objects for today's date combined with the entered time
            const startDate = new Date(`2000-01-01T${startTimeInput}`);
            const endDate = new Date(`2000-01-01T${endTimeInput}`);

            // Calculate the time difference in milliseconds
            let timeDifference = endDate.getTime() - startDate.getTime();

            // Handle negative time difference (if end time is earlier than start time)
            if (timeDifference < 0) {
                // If negative, add a day (24 hours) to the time difference
                timeDifference += 24 * 60 * 60 * 1000; // 24 hours in milliseconds
            }

            // Convert milliseconds to hours and minutes
            const totalHours = Math.floor(timeDifference / (1000 * 60 * 60));
            const remainingMinutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));

            // Display the total time
            let newtime = (totalHours < 10 ? '0' + totalHours : totalHours) + ':' + (remainingMinutes < 10 ? '0' + remainingMinutes : remainingMinutes);
            $('#TotalDGDuration').val(newtime);
        }
        function ValidateForm() {
            debugger
            var SPS_IPSId = $("#PK_IPS").val();

            if (SPS_IPSId == null || SPS_IPSId == "" || SPS_IPSId == NaN || SPS_IPSId == undefined) {
                SPS_IPSId = 0;
            }


            if ($("#Pk_STPId").val() == '' || $("#Pk_STPId").val() == null || $("#Pk_STPId").val() == 0) {
                $("#Pk_STPId").focus();
                return false;
            }

            if ($("#DeductionDate").val() == '' || $("#DeductionDate").val() == null || $("#DeductionDate").val() == 0) {
                $("#DeductionDate").focus();
                return false;
            }
            var date = checkdate();
            if (date == false) {
                return false;
            }
            if (parseInt(SPS_IPSId) == 120 || parseInt(SPS_IPSId) == 181) {
            } else {
                if (!$("#ElectricityCutStartTime").val()) {
                    $("#ElectricityCutStartTime").focus();
                    return false;
                }

                if (!$("#ElectricityCutEndTime").val()) {
                    $("#ElectricityCutEndTime").focus();
                    return false;
                }
            }



            if (!$("#DGStartTime").val()) {
                $("#DGStartTime").focus();
                return false;
            }
            if (!$("#DGEndTime").val()) {
                $("#DGEndTime").focus();
                return false;
            }

            if (!$("#DieselConsumes").val()) {
                $("#DieselConsumes").focus();
                return false;
            }
            if (!$("#DieselRateInMonth").val()) {
                $("#DieselRateInMonth").focus();
                return false;
            }
            if ($("#TotalDGDuration").val() == 0 || $("#TotalDGDuration").val() == 'NaN:NaN') {
                fShowToastalert('Please Fill valid time !')
                $("#TotalDGDuration").focus();
                return false;

            }
            //if ($("#Remark").val() == 0 || $("#Remark").val() == 'NaN:NaN') {
            //    fShowToastalert('Please Fill Remark !')
            //    $("#Remark").focus();
            //    return false;
            //}

            //}

            var date1 = fvalidateDGtime();
            if (date1 == false) {
                return false;
            }
        }
        function fHideSPS_IPS() {
            debugger
            var SPS_IPSId = $("#PK_IPS").val();

            if (SPS_IPSId == null || SPS_IPSId == "" || SPS_IPSId == NaN || SPS_IPSId == undefined) {
                SPS_IPSId = 0;
            }

            if (parseInt(SPS_IPSId) == 120 || parseInt(SPS_IPSId) == 181) {
                $("#ElectricityCutStartTime").val('');
                $("#ElectricityCutEndTime").val('');
                $(".fhideSPS_IPS").hide();
                return true;
            } else {
                $("#ElectricityCutStartTime").val('');
                $("#ElectricityCutEndTime").val('');
                $(".fhideSPS_IPS").show();
                return true;
            }
        }

        //modal
        function ValiddateJEBillCApproval() {
            debugger;
            //if ($("#Attachment").val() == undefined || $("#Attachment").val() == "") {
            //    fShowToastalert('Please enter Attachment.');
            //    $("#Attachment").focus();
            //     return false;
            // }
            if ($("#md_checkbox_34").prop('checked') == false) {
                fShowToastalert('Please check declaration box!');
                return false;
            }
            else {
                $("#DGBillApproval").submit();
            }

            var attachment = $('#Attachment')[0].files[0]
            var remark = $('#Remark').val();
            var declare = $("#md_checkbox_34:checked").val();
            var pkinv = $("#PK_InvId").val();
            var data = new FormData();
            data.append("AttachmentDoc", attachment);
            data.append("Remark", remark);
            data.append("Declaration", declare);
            data.append("PK_InvId", pkinv);


            $.ajax({
                type: "POST",
                url: "/Bill/VerifyDGBill",
                data: data,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                processData: false,
                contentType: false,
                success: function (data) {
                    if (data.status == "1") {
                        fShowToastalert(data.message);
                        $('#DGbill_Modal').modal('hide');
                        setTimeout(function () {
                            window.history.back();
                        }, 5000);


                    }
                },
                error: function (error) {
                    fShowToastalert(data.message);
                }
            });
        }
        function getBlank() {
            $('#Attachment').val('');
            $('#Remark').val('');
            $("#md_checkbox_34").prop('checked', false);
        }
    </script>
