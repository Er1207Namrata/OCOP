@model OCOO.Models.FirmMasters.Deduction
@{
    ViewData["Title"] = "AddDeduction";
    Layout = "~/Views/Shared/_FirmLayout.cshtml";
}

<div class="page-wrapper">
    <div class="row page-titles">
        <div class="col-md-6 align-self-center">
            <h3 class="text-themecolor">Add/Update DG Billing</h3>
        </div>
        <div class="col-md-6 align-self-right">
            <span class="float-right ml-1"><a href="/DeductionRelease/GetDeductionList?id=@Crypto.Encrypt(Model.Pk_STPId)" class="btn btn-sm btn-warning btn-xs" title="Back"><i class="fa fa-arrow-left"></i> Back</a></span>

        </div>
    </div>
    <div class="container-fluid">
        <div class="card p-3">
            <form asp-action="AddDeduction" asp-controller="DeductionRelease" method="post">
                <div class="row">
                    <input type="hidden" asp-for="Pk_DeductionId" />
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>STP <span class="text-danger">*</span></label>
                            @Html.DropDownListFor(m => m.Pk_STPId, new SelectList(ViewBag.ddlSTP, "Value", "Text"), new { @class = "form-control",@OnChange="return fbindIPS()"})
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Name Of IPS/SPS/STP</label>
                            @Html.DropDownListFor(m => m.PK_IPS, new SelectList(ViewBag.ddlIPS , "Value", "Text"), new { @class = "form-control", @onchange="return fHideSPS_IPS()"})
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Date <span class="text-danger">*</span></label>
                            <input type="text" readonly asp-for="DeductionDate" class="form-control datepicker" placeholder="dd/mm/yyyy" />
                        </div>
                    </div>
                    <div class="col-md-6 fhideSPS_IPS">
                        <div class="form-group">
                            <label>Electricity Cut Start Time <span class="text-danger">*</span></label>
                            <input type="time" onchange="return addFiveMinutes()" class="form-control" asp-for="ElectricityCutStartTime" placeholder="Enter Electricity Cut Start Time" />
                        </div>
                    </div>
                    <div class="col-md-6 fhideSPS_IPS">
                        <div class="form-group">
                            <label>Electricity Cut End Time <span class="text-danger">*</span></label>
                            <input type="time" onchange="return addOneMinutes()" class="form-control" asp-for="ElectricityCutEndTime" placeholder="Enter Electricity Cut End Time" onkeypress="return isNumberKey(this) " />
                            <b id="Showtimemsg" class="text-danger"></b>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>DG Start Time <span class="text-danger">*</span></label>
                            <input type="time" onchange="return fDGStartDuration()" class="form-control" asp-for="DGStartTime" placeholder="Enter DG Start Time" onkeypress="return isNumberKey(this)" />
                            <b id="Showtimemsg11" class="text-danger"></b>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>DG End Time <span class="text-danger">*</span></label>
                            <input type="time" onchange="return fCheckDGDuration()" class="form-control" asp-for="DGEndTime" placeholder="Enter DG End Time" onkeypress="return isNumberKey(this)" />
                            <b id="Showtimemsg1" class="text-danger"></b>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Diesel Consumption (In Litre) <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" asp-for="DieselConsumes" placeholder="Enter Diesel Consumption (In Litre)" onkeypress="return isNumberKey(this)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Diesel Rate<span class="text-danger">*</span></label>
                            <input type="text" class="form-control" asp-for="DieselRateInMonth" placeholder="Enter Diesel Rate" onkeypress="return isNumberKey(this)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Total DG Duration <span class="text-danger">*</span></label>
                            <input type="text" readonly class="form-control" asp-for="TotalDGDuration" placeholder="Enter Total DG Duration" onkeypress="return isNumberKey(this)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Remark </label>
                            <textarea class="form-control" asp-for="Remark"> </textarea>
                        </div>
                    </div>
                </div>
                <div class="text-right">

                    @if (@TempData["DGSubmit"] == null)
                    {
                        <button type="submit" class="btn btn-success btn-sm" id="submit" onclick="return ValidateForm();" value="Submit" name="btnSubmit"><i class="fa fa-save"> Save</i></button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success btn-sm" id="submit" onclick="return ValidateForm();" value="Update" name="btnSubmit"><i class="fa fa-save"> Update</i></button>
                    }
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        fbindIPS();
    });
    
    function fvalidateDGtime() {
        
        var SPS_IPSId = $("#PK_IPS").val();

        if (SPS_IPSId == null || SPS_IPSId == "" || SPS_IPSId == NaN || SPS_IPSId == undefined) {
            SPS_IPSId = 0;
        }

        if (parseInt(SPS_IPSId) == 120 || parseInt(SPS_IPSId) == 181) {
            return true;
        } else {
            const startTimeInput = document.getElementById('ElectricityCutStartTime');
            const endTimeInput = document.getElementById('ElectricityCutEndTime');
            const checkTimeInput = document.getElementById('DGStartTime');
            const endcheckTimeInput = document.getElementById('DGEndTime');
            const startTime = startTimeInput.value;
            const endTime = endTimeInput.value;
            const checkTime = checkTimeInput.value;
            const endcheckTime = endcheckTimeInput.value;

            // Check if all inputs are in HH:MM format
            const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;

            // if (timePattern.test(startTime) && timePattern.test(endTime) && timePattern.test(checkTime) && timePattern.test(endcheckTime))
            // {
            // Convert times to total minutes
            const [startHours, startMinutes] = startTime.split(':');
            const [endHours, endMinutes] = endTime.split(':');
            const [checkHours, checkMinutes] = checkTime.split(':');
            const [endcheckHours, endcheckMinutes] = endcheckTime.split(':');

            const totalStartMinutes = parseInt(startHours, 10) * 60 + parseInt(startMinutes, 10);
            const totalEndMinutes = parseInt(endHours, 10) * 60 + parseInt(endMinutes, 10);
            const totalCheckMinutes = parseInt(checkHours, 10) * 60 + parseInt(checkMinutes, 10);
            const totalEndCheckMinutes = parseInt(endcheckHours, 10) * 60 + parseInt(endcheckMinutes, 10);

            //if (totalCheckMinutes >= totalStartMinutes && totalCheckMinutes <= totalEndMinutes) {
            if (totalEndMinutes >= totalStartMinutes) {
                $('#Showtimemsg').html('')
            } else {
                // $('#Showtimemsg').html('Time difference should be greater than 5 minutes.');
                $('#Showtimemsg').html('Electricity cut end time should be greater than electricity cut start time.');
                $('#ElectricityCutEndTime').val('')
                $('#DGEndTime').val('')
                return false;
            }
            if (totalCheckMinutes >= totalStartMinutes) {
                $('#Showtimemsg11').html('')
            } else {
                $('#Showtimemsg11').html('DG start time should be greater than electricity cut start time.');
                $('#DGStartTime').val('')
                return false;
            }
            if (totalEndCheckMinutes >= totalEndMinutes) {
                $('#Showtimemsg1').html('')
            }
            //else {  // commented on 13 Feb 2024 by advice of Surendra Sir 
            //    $('#Showtimemsg1').html('DG end time should be greater than electricity cut end time.');
            //    $('#DGEndTime').val('')
            //    return false;
            //}
            if (totalEndCheckMinutes >= totalCheckMinutes) {
                $('#Showtimemsg1').html('')
            } else {
                $('#Showtimemsg1').html('DG end time should be greater than DG start time.');
                $('#DGEndTime').val('')
                return false;
            }
        }
        // }
    }

    function checkdate() {

        const dateToCheck11 = $("#DeductionDate").val();
        // Split the date string into day, month, and year components
        const [day, month, year] = dateToCheck11.split('/');

        // Create a Date object (Note: Months are zero-based in JavaScript Date)
        const dateToCheck = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);


        // Get the current date
        const currentDate = new Date();
        // Compare the dates
        if (dateToCheck > currentDate) {

            fShowToastalert('Please select Past date!');
            $("#DeductionDate").focus();
            return false;
        }


    }
    function addFiveMinutes() {
        // Get the current time from the input element
        let currentTime = document.getElementById('ElectricityCutStartTime').value;

        // Split hours and minutes
        let [hours, minutes] = currentTime.split(':');

        // Convert hours and minutes to numbers
        hours = parseInt(hours);
        minutes = parseInt(minutes);

        // Add 5 minutes
        let newMinutes = (minutes + 1) % 60;
        let additionalHours = Math.floor((minutes + 1) / 60);
        hours = (hours + additionalHours) % 24;

        // Format the new time with leading zeros if necessary
        let newTime =
            (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);
        // Set the new time in the input element
        $('#DGStartTime').val(newTime)
        fTotalDGDuration()
    }
    function addOneMinutes() {

        // Get the current time from the input element
        let currentTime = document.getElementById('ElectricityCutEndTime').value;

        // Split hours and minutes
        let [hours, minutes] = currentTime.split(':');

        // Convert hours and minutes to numbers
        hours = parseInt(hours);
        minutes = parseInt(minutes);

        // Add 5 minutes
        let newMinutes = (minutes + 1) % 60;
        let additionalHours = Math.floor((minutes + 1) / 60);
        hours = (hours + additionalHours) % 24;

        // Format the new time with leading zeros if necessary
        let newTime =
            (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);

        // Set the new time in the input element
        $('#DGEndTime').val(newTime)
        fvalidateDGtime()
        fTotalDGDuration()
    }

    function fCheckDGDuration() {

        // Get the current time from the input element
        let currentTime = document.getElementById('DGEndTime').value;

        // Split hours and minutes
        let [hours, minutes] = currentTime.split(':');

        // Convert hours and minutes to numbers
        hours = parseInt(hours);
        minutes = parseInt(minutes);

        // Add 5 minutes
        let newMinutes = (minutes) % 60;
        let additionalHours = Math.floor((minutes) / 60);
        hours = (hours + additionalHours) % 24;

        // Format the new time with leading zeros if necessary
        let newTime =
            (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);

        // Set the new time in the input element
        $('#DGEndTime').val(newTime)
        fvalidateDGtime()
        fTotalDGDuration()
    }
    function fDGStartDuration() {

        // Get the current time from the input element
        let currentTime = document.getElementById('DGStartTime').value;

        // Split hours and minutes
        let [hours, minutes] = currentTime.split(':');

        // Convert hours and minutes to numbers
        hours = parseInt(hours);
        minutes = parseInt(minutes);

        // Add 5 minutes
        let newMinutes = (minutes) % 60;
        let additionalHours = Math.floor((minutes) / 60);
        hours = (hours + additionalHours) % 24;

        // Format the new time with leading zeros if necessary
        let newTime =
            (hours < 10 ? '0' + hours : hours) + ':' + (newMinutes < 10 ? '0' + newMinutes : newMinutes);

        // Set the new time in the input element
        $('#DGStartTime').val(newTime)
        fvalidateDGtime()
        fTotalDGDuration()
    }

    function fTotalDGDuration() {
        const startTimeInput = document.getElementById('DGStartTime').value;
        const endTimeInput = document.getElementById('DGEndTime').value;

        // Create date objects for today's date combined with the entered time
        const startDate = new Date(`2000-01-01T${startTimeInput}`);
        const endDate = new Date(`2000-01-01T${endTimeInput}`);

        // Calculate the time difference in milliseconds
        let timeDifference = endDate.getTime() - startDate.getTime();

        // Handle negative time difference (if end time is earlier than start time)
        if (timeDifference < 0) {
            // If negative, add a day (24 hours) to the time difference
            timeDifference += 24 * 60 * 60 * 1000; // 24 hours in milliseconds
        }

        // Convert milliseconds to hours and minutes
        const totalHours = Math.floor(timeDifference / (1000 * 60 * 60));
        const remainingMinutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));

        // Display the total time
        let newtime = (totalHours < 10 ? '0' + totalHours : totalHours) + ':' + (remainingMinutes < 10 ? '0' + remainingMinutes : remainingMinutes);
        $('#TotalDGDuration').val(newtime);
    }
    function ValidateForm() {
        debugger
        var SPS_IPSId = $("#PK_IPS").val();

        if (SPS_IPSId == null || SPS_IPSId == "" || SPS_IPSId == NaN || SPS_IPSId == undefined) {
            SPS_IPSId = 0;
        }


        if ($("#Pk_STPId").val() == '' || $("#Pk_STPId").val() == null || $("#Pk_STPId").val() == 0) {
            $("#Pk_STPId").focus();
            return false;
        }

        if ($("#DeductionDate").val() == '' || $("#DeductionDate").val() == null || $("#DeductionDate").val() == 0) {
            $("#DeductionDate").focus();
            return false;
        }
        var date = checkdate();
        if (date == false) {
            return false;
        }
        if (parseInt(SPS_IPSId) == 120 || parseInt(SPS_IPSId) == 181) {
        } else {
            if (!$("#ElectricityCutStartTime").val()) {
                $("#ElectricityCutStartTime").focus();
                return false;
            }

            if (!$("#ElectricityCutEndTime").val()) {
                $("#ElectricityCutEndTime").focus();
                return false;
            }
        }



        if (!$("#DGStartTime").val()) {
            $("#DGStartTime").focus();
            return false;
        }
        if (!$("#DGEndTime").val()) {
            $("#DGEndTime").focus();
            return false;
        }

        if (!$("#DieselConsumes").val()) {
            $("#DieselConsumes").focus();
            return false;
        }
        if (!$("#DieselRateInMonth").val()) {
            $("#DieselRateInMonth").focus();
            return false;
        }
        if ($("#TotalDGDuration").val() == 0 || $("#TotalDGDuration").val() == 'NaN:NaN') {
            fShowToastalert('Please Fill valid time !')
            $("#TotalDGDuration").focus();
            return false;

        }
        //if ($("#Remark").val() == 0 || $("#Remark").val() == 'NaN:NaN') {
        //    fShowToastalert('Please Fill Remark !')
        //    $("#Remark").focus();
        //    return false;
        //}

        //}       

        var date1 = fvalidateDGtime();
        if (date1 == false) {
            return false;
        }
    }

    function EditForm(txtId) {
        //debugger;
        $.ajax({
            url: '/DeductionRelease/AddDeduction',
            type: 'GET',
            data: { Id: txtId },
            success: function (data) {
                if (data != null) {
                    $("#DeductionDate").val(data.deductionDate);
                    $("#ElectricityCutStartTime").val(data.electricityCutStartTime);
                    $("#ElectricityCutEndTime").val(data.electricityCutEndTime);
                    $("#DGStartTime").val(data.dgStartTime);
                    $("#DGEndTime").val(data.dgEndTime);
                    $("#DieselConsumes").val(data.dieselConsumes);
                    $("#DieselRateInMonth").val(data.dieselRateInMonth);
                    $("#Pk_DeductionId").val(data.pk_DeductionId);
                    $("#TotalDGDuration").val(data.totalDGDuration);
                    $("#Pk_STPId").val(data.pk_STPId);
                    $("#Remark").val(data.Remark);
                    fbindIPS()
                    $("#PK_IPS").val(data.pK_IPS);
                    $("#submit").val('Update');
                    $('#modeDeduction').modal('show');
                    $("#submit").html('<i class="fa fa-pencil"> Update </i>');

                }
            },
            error: function (error) {
                fShowToasterror(error);
            }
        })
    }

    function fbindIPS() {
        var dropdown = $('#PK_IPS');
        dropdown.empty();
        fHideSPS_IPS();
        var PK_ID = $("#Pk_STPId").val()
        //debugger
        if (PK_ID != 0) {
            $.ajax({
                url: '/STP/PumpingStationDropDown?Data=' + PK_ID,
                method: 'GET',
                success: function (data) {
                  
                    $.each(data, function (index, item) {
                        dropdown.append($('<option>', {
                            value: item.value,
                            text: item.text
                        }));
                    });
                },
                error: function (error) {
                    fShowToasterror(error);
                }
            });
        }
    }

    function fHideSPS_IPS()
    {
    debugger
        var SPS_IPSId = $("#PK_IPS").val();

        if (SPS_IPSId == null || SPS_IPSId == "" || SPS_IPSId == NaN || SPS_IPSId == undefined) {
            SPS_IPSId = 0;
        }

        if (parseInt(SPS_IPSId) == 120 || parseInt(SPS_IPSId) == 181) {
            $("#ElectricityCutStartTime").val('');
            $("#ElectricityCutEndTime").val('');
            $(".fhideSPS_IPS").hide();
            return true;
        } else {
            $("#ElectricityCutStartTime").val('');
            $("#ElectricityCutEndTime").val('');
            $(".fhideSPS_IPS").show();
            return true;
        }
    }
</script>